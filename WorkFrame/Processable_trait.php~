<?php

namespace WorkFrame;

trait Processable_trait {

	protected $errors = [];

	protected $processors = [];

	function __construct() {
		
	}

	// Use me for form validation or value sanitizing or whatever
	function process($stop_on_error = FALSE) {
		$this->errors = [];
		foreach ($this->processors as $process) {
			if (!$this instanceof \Workframe\Domain_object || empty($process['scenarios']) || in_array($this->scenario, $process['scenarios'])) {
				foreach ($process['fields'] as $field_names) {
					if (is_array($field_names)) {
						$value = [];
						foreach ($field_names as $f) {
							$value[$f] = $this->$f;
						}
					} else {
						$value = $this->field;
					}
					$result = $process['processor']($field_names, $value, isset($process['args']) ? $process['args'] : NULL);
					if ($result === TRUE) {
						continue;
					}

					$field_name = $result['field_name'];
					if (isset($result['new_value'])) {
						$this->$field_name = $result['new_value'];
					}
					if (isset($result['is_error']) && $result['is_error']) {
						if(!isset($result['field_label'])) {
							$result['field_label'] = $result['field_name'];
							if (method_exists($this, 'get_field_label')) {
								$result['field_label'] = $this->get_field_label($field_name);
							} 
						}
						$this->errors[] = $result;
						if ($stop_on_error) {
							return FALSE;
						}
					}
				}
			}
		}
		return count($this->errors) > 0;
	}

	function get_client_side_processor_code($form_id) {
		add_script('jquery-3.0.0.js');
		add_script('_workframe_functions.js');
		add_script('_workframe_processors.js');
		
		$form_tools = new \WorkFrame\Html\Form_tools($form_id, $this);

		$funcs_js = [];
		foreach ($this->processors as $process) {
			if (!$this instanceof \Workframe\Domain_object || empty($process['scenarios']) || in_array($this->scenario, $process['scenarios'])) {
				if ($process['client_side_processor']) {
					
					$func_body_js = $process['client_side_processor']($form_id, $field_names);#

					// Create a funciton 
					$field_names = array_values((array)$field_names); // Force non array to array containing the item, also ensure it has sequental numeric keys
					foreach($field_names as $k=>$field_name) {
						$this_fields_process_func_name = $form_tools->js_process_field_function_name($field_name);
						$field_id = $form_tools::field_id($form_id, $field_name);
						isset($funcs_js[$this_fields_process_func_name]) or $funcs_js[$this_fields_process_func_name] = '';
						$funcs_js[$this_fields_process_func_name] .= $func_body_js . "\n";
						$funcs_js[$this_fields_process_func_name] .= '
							if(result !== true && "new_value" in result) {
								$("#'.$field_id.'" [name='.$field_name.']).value = result["new_value"];
							}
							if(result !== true && "is_error" in result && result["is_error"]) {
								errors.push(result);
							} else if(result !== true && "is_warnings" in result && result["is_warning"]) {
								warnings.push(result);
							} else {
								successes.push("'.$field_id.'");
							}
						';
					}
				}
			}
		}

		// First add funcs to validate individual fields
		$js = '
			<script>';
		foreach($funcs_js as $process_field_func_name => $func_js) {
			$js .= '
				function '.$process_field_func_name.'() {
					var errors = [];
					var successes = [];
					var warnings = [];
';
			$js .= $func_js . '
					_workframe_show_errors("'.$form_id.'", errors);
					_workframe_show_successes("'.$form_id.'", successes);
					_workframe_show_warnings("'.$form_id.'", warnings);
				}';
		}

		
		// Now add a func to validate everything (for onsubmit)
		$process_form_func_name = $form_tools->js_process_form_function_name($field_name);
		$js .= 'function ' . $process_form_func_name. '(){
';
		foreach($funcs_js as $process_field_func_name => $func_js) {
			$js .= '
				' . $process_field_func_name . '();' . "\n";
		}
		$js .= '
			</script>';

		return $js;
		// TODO: Minify + Cache me?  Or just minify .. use md5 to uniquely identify ? 
	}

	function get_errors_by_field() {
		foreach ($this->errors as $error) {
			$field_errors[$error['field_name']][] = $error;
		}
		return $field_errors;
	}

	function field_has_error($field_name) {
		$errors_by_field = $this->get_errors_by_field();
		return !empty($errors_by_field[$field_name]);
	}

}
